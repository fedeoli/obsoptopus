%% EKF PROJECT 
% Author: Daniele Giorgi, Federico Oliva
% Date: 27/08/2020
%
% POSSIBILI UPDATE/PROBLEMI
% 1) Avanzini usa la dinamica dei quaternioni e anche Challa. Quello che dice
%   è che l'errore di attitude è a 3, che ci sta, è quello che ha fatto
%   Daniele. 
% 2) Altra cosa che dice è che P deve essere 6x6 ma lui non la aggiorna
%   risolvendo una Riccati, che richiede che abbia la stessa dimensione
%   della matrice dinamica A.
% 3) TODO magnetometri: 
%   a) crea orientamento tra i 2 magnetometri (Dtheta)
%   b) z = [B1 B2 Gyro]
%   c) h = from [q w] to [B1 B2 w]

%% Init Section

% Clear workspace
clc
clear 
close all


% Symbolic definitions
fprintf('Setting Observer parameters\n');
syms Ixx Iyy Izz;       % System Inertia
syms wx wy wz;          % System angular velocity
syms q1 q2 q3 q0;       % Quaternion
syms Bx1 By1 Bz1 Bx2 By2 Bz2;          % Magnetometer measures

%Set params ObserverTest
addpath(genpath([pwd 'Observer']));
addpath(genpath([pwd 'Lib']));
addpath(genpath([pwd 'AlbedoToolbox-1.0']));
addpath(genpath(pwd));
Input1;
OutputInitialization_V2_2;
params.SatellitesCoordinates = satellites_iner_ECI;
params.u = u;
Observer_Setup_Parameter_Save_V1_1;

%%%%% ORBITAL PROPAGATOR  %%%%%%
% Initial satellite position 
Chi = satellites_iner_ECI;
satellites_iner_ECI = satellites_iner_ECI(1:3,1)';
satellites_iner_ECI_est = satellites_iner_ECI;

% flags
nMagneto = 1; % number of Magnetometers (max. 2)
Sun = 1; % 0: no Sun Sensor; 1: with Sun Sensor

% Simulation data
nIter = 100;
tspan = [0 1]; 

% Global vars definition
global ObserverTest

%% INITIAL CONDITIONS
%  x_m: previous estimated state [quaternion, omegas, bias_mag, bias_gyro],  the first component of the quaternion is the scalar part
%  P_x: previous covariance matrices

% Kinematic and measures init 

% angular velocity measured by gyro - Body frame
omega_Body2ECI_Body = [wx wy wz];
w_body = omega_Body2ECI_Body;

% quaternion in Body frame
q_ECI2Body = [q0 q1 q2 q3];
q_sym = [q0 q1 q2 q3];
% attitude from quaternion - vector elements
attitude_ECI = q_ECI2Body(2:4);
% junk assignment (?)
qin = q_ECI2Body;

% Magneto measures - Inertial frame
Magneto1 = [Bx1 By1 Bz1];
BI_1 = Magneto1;
params.BI1_sym = BI_1;

if nMagneto == 2
    Magneto2 = [Bx2 By2 Bz2];
    BI_2 = Magneto2;
    params.BI2_sym = BI_2;
end

% Dynamics init - inertia and mass
In = [Ixx, Iyy, Izz];

% Cosines matrix from quaternion
dcm = sym('dcm', [3,3]);

% MATLAB VERSION
dcm(1,1,:) = qin(:,1).^2 + qin(:,2).^2 - qin(:,3).^2 - qin(:,4).^2;
dcm(1,2,:) = 2.*(qin(:,2).*qin(:,3) + qin(:,1).*qin(:,4));  
dcm(1,3,:) = 2.*(qin(:,2).*qin(:,4) - qin(:,1).*qin(:,3));
dcm(2,1,:) = 2.*(qin(:,2).*qin(:,3) - qin(:,1).*qin(:,4));
dcm(2,2,:) = qin(:,1).^2 - qin(:,2).^2 + qin(:,3).^2 - qin(:,4).^2;
dcm(2,3,:) = 2.*(qin(:,3).*qin(:,4) + qin(:,1).*qin(:,2));
dcm(3,1,:) = 2.*(qin(:,2).*qin(:,4) + qin(:,1).*qin(:,3));
dcm(3,2,:) = 2.*(qin(:,3).*qin(:,4) - qin(:,1).*qin(:,2));
dcm(3,3,:) = qin(:,1).^2 - qin(:,2).^2 - qin(:,3).^2 + qin(:,4).^2;

% Magneto measures - Body frame
B_body_1 = dcm*transpose(BI_1);

if nMagneto == 2
    B_body_2 = dcm*transpose(BI_2);
end

% Angular velocity - Inertial frame
wI = transpose(dcm)*transpose(omega_Body2ECI_Body);

%%%%%%%%%%%%%%%%%%%%%%% SUN SENSOR INIT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if Sun == 1
    % Determine Sun Vec in Inertial Frame
    T = 7551; % 3 settembre 2020
    CONST.ua = 1.496e+08;

    Msun=357.528+0.9856003*T; % mean anomaly 
    Vsun=280.461+0.9856474*T+1.915*sind(Msun)+0.020*sind(2*Msun); %ecliptic longitude
    Lsun = 0; % ecliptic latitude
    R = 1.000014-0.01671*cosd(Msun)-0.00014*cosd(2*Msun); %distance sun-Earth in ua
    obliquity=23.4393-0.0000004*T;
    
    %%% Conversion in equatorial coordinates %%%
    right_asc = atan2(cos(obliquity)*sind(Vsun), cosd(Vsun));
    decl = asin(sind(obliquity)*sind(Vsun));
    
    %%% Conversion in Rectangular equatorial coordinates %%%
    Xsun=R*cosd(Vsun);
    Ysun=R*cosd(obliquity)*sind(Vsun);
    Zsun=R*sind(obliquity)*sind(Vsun);
    Si=[Xsun Ysun Zsun];
    Si=Si./norm(Si);
    % N.B. sono in unità astronomiche! 
    
    
%     [Si(1) Si(2) Si(3)] = sph2cart(0, 1.17, CONST.ua);
%     Si = [Si(1) Si(2) Si(3)]
    
    

    A=30.16/100^2; % m^2
    eff=0.251; % max efficiency
    K=1367; % W/m^2 Sun incidence energy avg
    I0=A*K*cos(0)*eff;  % Max theoretical intensity 

    % Volt = sym('V', [1 3]);
    % Ncell = sym('N', [1 3]);
    Psun = sym('P', [1 3]);
    params.Psun = Psun;

    hss = dcm*transpose(Psun); 
end
%%%%%%%%%%%%%%%%%%%%%%% ALBEDO EFFECT INIT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

dcmecef = dcmeci2ecef('IAU-2000/2006',[2019 12 15 10 20 36]); % dcm matrix from ECI 
% to ECEF;
sat_ecef = dcmecef*satellites_iner_ECI'*1E3;
sun_ecef = dcmecef*Si'*1E3;
sun_ecef(3) = sun_ecef(3)*CONST.ua;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Vett. di stato
X = [q_ECI2Body, omega_Body2ECI_Body]; 


% Measurements array (getting magnetometer and gyro data)
% h = [BI/norm(BI); wI];

% measurements array - see paper "Low cost, Good Accuracy..."
% h = [B_body/norm(B_body) ; transpose(w_body)];

if Sun == 0
    if nMagneto == 1 
        h = [B_body_1; transpose(w_body)];
    elseif nMagneto == 2
        h = [B_body_1 ; B_body_2; transpose(w_body)];
    end
elseif Sun == 1
    if nMagneto == 1 
        h = [B_body_1; hss; transpose(w_body)];
    elseif nMagneto == 2
        h = [B_body_1 ; B_body_2; hss; transpose(w_body)];
    else
        h = [hss; transpose(w_body)];
    end
end

%number of state
n=size(X,2);     
%number f observed values [attitude, gyros];
m =size(h,1);    

%standard deviation (std) of process f
q = 1*1E-6;    
%std of measurement h
r = 3*1E-3;  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%q = 0;
%r = 0;
%b_mag = 0;
%b_gyro = 0;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% covariance matrix of process
% Q = blkdiag(eye(4)*1e-2, eye(3)*1e-2); 
% % covariance matrix of measurement
% R = eye(m)*1e-3; 
% P = blkdiag(eye(4)*1e3, eye(3)*1e2);

% SAFE VERSION
% covariance matrix of process
Q=q*eye(n); 
% covariance matrix of measurement
R=r*eye(m); 
P = blkdiag(eye(4), eye(3))*1E-3;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% initial state covariance
% P = ObserverTest.Pi; 
% Initial disturbance matrices
% Q = ObserverTest.Qi; 
% R = ObserverTest.Ri;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% Initial condition 
xk = satellites_attitude(1:7,1)';

% Init attitude
q0 = quatnormalize(xk(1:4));
% q0_euler_rad = ConvertAttitude(q0', 'quaternion', '321')';
q0_euler_rad = quat2eul(q0, 'ZYX')';
w0 = xk(5:7);

% Noise definition - deg
max_deg_var = 20;                                % deg
max_vel_var = 10;                                % deg/s
amp_noise_attitude = max_deg_var*pi/180;        % rad
amp_noise_velocity = max_vel_var*pi/180;        % rad/s

% Init definition
qhat_euler_rad = q0_euler_rad + amp_noise_attitude*randn(3,1);
qhat = quatnormalize(eul2quat(qhat_euler_rad','ZYX'));
w_hat = w0 + amp_noise_velocity*randn(1,3);
xhat = [qhat w_hat];

% error definition
err_euler_deg = (q0_euler_rad - qhat_euler_rad)*180/pi;
err_w = w0 - w_hat;


% measurement initialization
% Sensor Measurements, true(synthetic) and estimate
% displacement between the 2 magnetometers - euler angle
% riga 130 di Observer_Setup_Parameter_V1
Dtheta = ObserverTest.RPYbetweenMagSensors;
% general measure
[MagTemp_body1,MagTemp_body2,GyrosTemp_body] = ...
    AttitudeObserver_GetMeasures_v2_2(satellites_iner_ECI, q0, ...
    w0,zeros(3,1)',zeros(3,1)',Dtheta, 1);

% reference transformation and normalization
R_ECI2Body = quat2dcm(q0);
MagTemp_I1 = R_ECI2Body'*MagTemp_body1;

if nMagneto == 2
    MagTemp_I2 = R_ECI2Body'*MagTemp_body2;
end

% measurement assignment
hss_body = [0 0 0]';
if Sun == 0
    if nMagneto == 1 
        z = [MagTemp_body1' GyrosTemp_body'];
    elseif nMagneto == 2
        z = [MagTemp_body1' MagTemp_body2' GyrosTemp_body'];
    end
elseif Sun == 1
    if nMagneto == 1 
        z = [MagTemp_body1' hss_body' GyrosTemp_body'];
    elseif nMagneto == 2
        z = [MagTemp_body1' MagTemp_body2' hss_body' GyrosTemp_body'];
    else
        z = [hss_body' GyrosTemp_body'];
    end
end
z_hat = z + r*randn(1,length(z));

%% Dynamics setup section
% satellite equation
f = attitude_Kin_eqs(omega_Body2ECI_Body, q_ECI2Body.', In, params, dcm); 

% Numerical substitution
% f = subs(f, M, [0.89, .87, .61]);
f = subs(f, In, [params.sat(1).I(1,1) params.sat(1).I(2,2) params.sat(1).I(3,3)]);

% linearization of satellite equations
A = jacobian(f,X);    
H = jacobian(h,X);  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% H = [A1*transpose(Magneto) A2*transpose(Magneto) A3*transpose(Magneto) ...
%     A4*transpose(Magneto) zeros(3,3); zeros(3,7)];
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Storage array init
x_hatV = zeros(nIter+1,n);      
zV = zeros(nIter+1,m);
z_hatV = zeros(nIter+1,m);
xV = zeros(nIter+1,n);
ECI_store = zeros(nIter+1,3);
MAG_store = zeros(nIter+1,3);

% store EKF results
x_hatV(1,:) = xhat;
xV(1,:) = xk;
zV(1,:) = z;
z_hatV(1,:) = z_hat;

% store ECI and magnetometer
ECI_store(1,:) = satellites_iner_ECI;
MAG_store(1,:) = MagTemp_I1;

% Error array init
q_meas = zeros(nIter+1,4);
q_est = zeros(nIter+1,4);
q_meas_Euler = zeros(nIter+1,3);
q_est_Euler = zeros(nIter+1,3);
delq = zeros(nIter+1,4);
delq_Euler = zeros(nIter+1,3);
sun_error = zeros(nIter+1,3);

% CALCOLO ERRORE DI QUATERNIONE - init
q_meas(1,:) = xV(1,1:4);
q_meas(1,:) = transpose(quatnormalize(q_meas(1,:)));
% q_meas_Euler(1,:) = ConvertAttitude(q_meas(1,:)', 'quaternion', '321')';
q_meas_Euler(1,:) = quat2eul(q_meas(1,:), 'ZYX')';

q_est(1,:) = x_hatV(1,1:4);
q_est(1,:) = transpose(quatnormalize(q_est(1,:)));
% q_est_Euler(1,:) = ConvertAttitude(q_est(1,:)', 'quaternion', '321')';
q_est_Euler(1,:) = quat2eul(q_est(1,:), 'ZYX')';

delq_Euler(1,:) = q_meas_Euler(1,:)-q_est_Euler(1,:);
delq(1,:) = quatmultiply(quatconj(q_meas(1,:)), q_est(1,:));


%% DYNAMICS INTEGRATION SECTION
fprintf('Dynamics integration\n');
tic
for k=1:nIter
    
    % Info
    fprintf('Iteration N: %d\n',k);
    
    % Integrazione posizione del satellite
    Chi = rk4_V1_1(@InertialDynamicsIntegrator_V2_1, tspan, Chi(:,end), params);
    satellites_iner_ECI = Chi(1:3,end)';
    
    % Store past values
    x_past = xk;
    xhat_past = xhat;
    
    %%%%%%%%%%%%%%%%%%%% ATTITUDE PROPAGATION %%%%%%%%%%%%%%%%%%%%
    % Simulo evoluzione VERA dello stato
    % No need to change tspan as the system is shift time invariant
    x = rk4_V1_1(@AttitudeDynamics_V1_fede, tspan, xk, params)';

    % get quaternion evolution
    q_true = x(end,1:4); 
    % get angular velocity evolution
    omega_true = x(end,5:7);
    
    % Simulation of the system with added disturbances
    % Simulo evoluzione STIMATA dello stato
    xhat = rk4_V1_1(@AttitudeDynamics_V1_fede, tspan, xhat, params)';

    % get quaternion evolution
    q_hat = xhat(end,1:4); 
    % get angular velocity evolution
    omega_hat = xhat(end,5:7);
    
    % quaternion normalization
    q_ECI2Body = q_true/norm(q_true);
    q_ECI2Body_hat = q_hat/norm(q_hat);
    
    % get attitude values
    attitude_ECI = q_ECI2Body(2:4);
    attitude_ECI_est = q_ECI2Body_hat(2:4);
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Sensor Measurements, true(synthetic) and estimate  
    % displacement between the 2 magnetometers - euler angle
    % riga 130 di Observer_Setup_Parameter_V1
    Dtheta = ObserverTest.RPYbetweenMagSensors;
    % general measure
    [MagTemp_body1,MagTemp_body2,GyrosTemp_body] = ...
        AttitudeObserver_GetMeasures_v2_2(satellites_iner_ECI, q_ECI2Body, ...
        omega_true,zeros(3,1)',zeros(3,1)',Dtheta, 0);
    
    % reference transformation and normalization
    R_ECI2Body = quat2dcm(q_ECI2Body); 
    MagTemp_I1 = R_ECI2Body'*MagTemp_body1;
    if nMagneto == 2
        MagTemp_I2 = R_ECI2Body'*MagTemp_body2;
    end
    
    % state and oberved state
    xk_model = [q_ECI2Body, omega_true];
    xk = [q_ECI2Body, GyrosTemp_body'];
    xhat = [q_ECI2Body_hat, omega_hat];
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SUN SENSOR %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    if Sun ~= 0
        R_ECI2Body = quat2dcm(q_ECI2Body);
        SunTemp = (R_ECI2Body)*Si';

        theta_x = atan2(norm(cross(SunTemp,[1 0 0])),dot(SunTemp,[1 0 0]));
        theta_y = atan2(norm(cross(SunTemp,[0 1 0])),dot(SunTemp,[0 1 0]));
        theta_z = atan2(norm(cross(SunTemp,[0 0 1])),dot(SunTemp,[0 0 1]));
        theta_mx = atan2(norm(cross(SunTemp,[-1 0 0])),dot(SunTemp,[-1 0 0]));
        theta_my = atan2(norm(cross(SunTemp,[0 -1 0])),dot(SunTemp,[0 -1 0]));
        theta_mz = atan2(norm(cross(SunTemp,[0 0 -1])),dot(SunTemp,[0 0 -1]));

        theta = [theta_x, theta_y, theta_z, theta_mx, theta_my, theta_mz];
        
        %%%%%%%%%%%%%%%%%% Accounting ALBEDO %%%%%%%%%%%%%%%%%%%%%%%%%%
        sat_ecef = dcmecef*satellites_iner_ECI'*1e03; % from ECI to ECEF,
        % better when calculating the spherical coordinates (accounting the
        % Earth rotation!).
        path = [pwd '/AlbedoToolbox-1.0'];
        refl = load([path '/AlbedoToolbox-1.0/refl-data/2005/ga050101-051231.mat']);
        myutc = [2019 12 15 10 20 36];
        
        [a_tot, phi_sat] = albedo(sat_ecef,sun_ecef,refl); % Albedo matrix and vector
         
        I = zeros(1,6);
        I_a = cos(phi_sat);
        I_true = zeros(1,6);
        
        for i = 1:numel(theta)
            for j = 1:numel(I_a)
             if theta(i) > pi/2
                if (a_tot > 0) 
                    I(i) = I0*a_tot*I_a(j); %Albedo measurements
                    I_true(i) = 0;
                    break
                else
                    I(i) = 0;   % ECLIPSE (???)
                end    
             else   
                I(i) = I0*cos(theta(i)); % Sun measurements
                I_true(i) = I0*cos(theta(i));
             end
            end
        end
        
        Idiff = [I(1)-I(4), I(2)-I(5), (I(3)-I(6))];
        Idiff_true = [I_true(1)-I_true(4), I_true(2)-I_true(5), (I_true(3)-I_true(6))];
    %    Itot = norm(Idiff); ??? 
    
    %%%%%%%%%%%%%%% CHECK THIS %%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %     V = 0.6 + 0.0259*real(log(cos(sigma(1:3)))); % 3 cells voltage (???)
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        S_hat = 1/I0*transpose(Idiff); % SunVector_hat
        S_true = 1/I0*transpose(Idiff_true);
        Vmax = 0.6;
        hss_body = Vmax*S_hat;
        hss_I = R_ECI2Body'*hss_body;
    end
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   
    % numeric evaluation of system linearization
    H_num = subs(H, BI_1, MagTemp_I1');
    if nMagneto == 2
        H_num = subs(H_num, BI_2, MagTemp_I2');
    end
    if Sun == 1
        H_num = subs(H_num, Psun, hss_I');
    end
    H_num = subs(H_num, omega_Body2ECI_Body, omega_hat);
    H_num = subs(H_num, q_sym, q_ECI2Body_hat);
    H_num = double(H_num);
    
    % numeric evaluaion of the output mapping
    h_num = subs(h, BI_1, MagTemp_I1');
    if nMagneto == 2
        h_num = subs(h_num, BI_2, MagTemp_I2');
    end
    if Sun == 1
        h_num = subs(h_num, Psun, hss_I');
    end
    h_num = subs(h_num, omega_Body2ECI_Body, omega_hat);
    h_num = subs(h_num, q_sym, q_ECI2Body_hat);
    h_num = double(h_num);
    
    % measurement assignment
    if Sun == 0
        if nMagneto == 1 
            z = [MagTemp_body1' GyrosTemp_body'];
        elseif nMagneto == 2
            z = [MagTemp_body1' MagTemp_body2' GyrosTemp_body'];
        end
    elseif Sun == 1
        if nMagneto == 1 
            z = [MagTemp_body1' hss_body' GyrosTemp_body'];
        elseif nMagneto == 2
            z = [MagTemp_body1' MagTemp_body2' hss_body' GyrosTemp_body'];
        else
            z = [hss_body' GyrosTemp_body'];
        end
    end

    % estimation
%     z_hat = double(H_num*xhat')';
    z_hat = double(h_num');

    % Params storage procedure
    params.R_ECI2Body = R_ECI2Body;
    params.omega_Body2ECI_Body = omega_Body2ECI_Body;
    params.q_ECI2Body = q_ECI2Body;
    params.attitude_ECI = attitude_ECI;
    params.attitude_ECI_est = attitude_ECI_est;
    params.P = P;
    params.Q = Q;
    params.R = R;
    params.X = X;
    params.A = A;
    params.H = H;
    params.ObserverTest = ObserverTest;
    params.tspan = tspan;
    
    %%%%% EKF %%%%%
    [x_hat_next, Pnext] = ekf_V5_fede(xhat_past,xhat,z,z_hat,params,nMagneto,Sun);
    
    
    % store EKF results
    x_hatV(k+1,:) = x_hat_next;
    xV(k+1,:) = xk;
    zV(k+1,:) = z;
    z_hatV(k+1,:) = z_hat;
    ECI_store(k+1,:) = satellites_iner_ECI;
    MAG_store(k+1,:) = MagTemp_I1;
    
    % update cvariance matrix
    P = Pnext;
    
    % update estimation state + measures
    xhat(1:4) = x_hat_next(1:4);
    xhat(5:7) = x_hat_next(5:7);
    
    % CALCOLO ERRORE DI QUATERNIONE
    q_meas(k+1,:) = xV(k+1,1:4);
    q_meas(k+1,:) = transpose(quatnormalize(q_meas(k+1,:)));
%     q_meas_Euler(k+1,:) = ConvertAttitude(q_meas(k+1,:)', 'quaternion', '321')';
    q_meas_Euler(k+1,:) = quat2eul(q_meas(k+1,:), 'ZYX')';
    
    q_est(k+1,:) = x_hatV(k+1,1:4);
    q_est(k+1,:) = transpose(quatnormalize(q_est(k+1,:)));
%     q_est_Euler(k+1,:) = ConvertAttitude(q_est(k+1,:)', 'quaternion', '321')';
    q_est_Euler(k+1,:) = quat2eul(q_est(k+1,:), 'ZYX')';
    
    delq_Euler(k+1,:) = q_meas_Euler(k+1,:)-q_est_Euler(k+1,:);
    delq(k+1,:) = quatmultiply(quatconj(q_meas(k+1,:)), q_est(k+1,:));
    
    %%%%% Angular Sun error %%%%%  
    sun_error(k,:) = sqrt(mean((S_true*180/pi-S_hat*180/pi).^2));
    
end
toc

%% Plot section
figure(1)
for k=1:3
    %set(gca, 'YAxisLocation', 'origin') % plot results
    subplot(3,1,k)
    plot(1:(nIter+1), q_meas_Euler(:,k)*180/pi, '-', 1:(nIter+1), q_est_Euler(:,k)*180/pi, '--');
    grid on;
    lab = ["Roll","Pitch","Yaw"];
    title('Roll-Pitch-Yaw attitude estimation');
    legend(lab(k),strcat(lab(k), ' estimated'));
end

figure(2)
for k=1:3
    subplot(3,1,k)
    plot(1:(nIter+1), abs(delq_Euler(:,k))*180/pi, 'r-');
    grid on;
    %quat = sprintf('q%d',k);
    %strcat(quat,' error'),
    title('Attitude error');
    legend(lab(k));
    %ylim([-2 8])
end

figure(3)
for k=1:3
    subplot(3,1,k)
    plot(1:(nIter+1), abs(delq(:,k+1)), 'b-');
    grid on;
    quat = sprintf('q%d',k+1);
    strcat(quat,' error');
    title('Attitude error');
    legend(quat);
    %ylim([-2 8])
end

% real trajectory
figure
grid on
hold on
title('Fleet trajectories')
xlabel('Km')
ylabel('Km')
zlabel('Km')
RF_flag = 0;

figure(4)
style_real = 'o';
linewidth = 1;
xreal = ECI_store(:,1);
yreal = ECI_store(:,2);
zreal = ECI_store(:,3);
plot3(xreal,yreal,zreal,style_real,'MarkerFaceColor','b');

% magnetic field measurements - Magnetometer 1
figure(5)
hold on
plot(1:nIter+1,MAG_store(:,1),'r');
plot(1:nIter+1,MAG_store(:,2),'g');
plot(1:nIter+1,MAG_store(:,3),'b');
legend('Mag_I_x','Mag_I_y','Mag_I_z');

figure(6)
for k=1:3
    %set(gca, 'YAxisLocation', 'origin') % plot results
    subplot(3,1,k)
    plot(1:(nIter+1), sun_error(:,k), '-');
    grid on;
    title('Error angle sun sensor vs sun direction with albedo');
    %legend(lab(k),strcat(lab(k), ' estimated'));
   
end
