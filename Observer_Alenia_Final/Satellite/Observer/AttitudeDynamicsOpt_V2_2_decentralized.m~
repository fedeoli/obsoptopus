 function [dw]  = AttitudeDynamicsOpt_V2_1_decentralized(w, params,ith_satellite,k_microstep)
%A global observer for attitude and gyro biases from vector measurements
% Philippe Martin  Ioannis Sarras
%10.1016/j.ifacol.2017.08.1868

%q = w(1:4)
%omega = w(5:7)
%alpha hat = w(8:10)
%beta hat = w(11:13)
%b omega hat = w(14:16)

global ObserverTest Agent

% Initialize integration vectors and parameters
dw = zeros(length(w), 1);
mie = params.mi;

% Extract attitude, angular velocity and inertia of satellite "ith-satellite"
Att_sat_i = w;
q_ECI2Body =  Att_sat_i(1:4);
omega_Body2ECI_Body = Att_sat_i(5:7);
I = params.sat(ith_satellite).I;

% % Compute Hill's attitude and angular velocity wrt ECI
% vect_r_chief = Agent(1).xHatUKF(1:3,ObserverTest.actual_time_index);
% vect_v_chief =Agent(1).xHatUKF(4:6,ObserverTest.actual_time_index);
% R_ECI2Hill = RECI2Hill(vect_r_chief, vect_v_chief);
% omega_Hill2ECI_ECI = OmegaHill2ECI(vect_r_chief, vect_v_chief, mie);
%     omega_Body2Hill_Body = -(R_ECI2Body*omega_Hill2ECI_ECI - omega_Body2ECI_Body);


% Extract "i"-th satellite's inertial position and velocity
%vect_r = params.X_SAT_ECI(6*(ith_satellite-1) + 1 : 6*(ith_satellite-1) + 3);%Agent(ith_satellite).xHatUKF(1:3,ObserverTest.actual_time_index); %USE THE ESTIMATES ????
%vect_v = params.X_SAT_ECI(6*(ith_satellite-1) + 4 : 6*(ith_satellite-1) + 6);%Agent(ith_satellite).xHatUKF(4:6,ObserverTest.actual_time_index);
vect_r =  Agent(ith_satellite).xHatUKF(1:3,ObserverTest.actual_time_index); 
vect_v = Agent(ith_satellite).xHatUKF(4:6,ObserverTest.actual_time_index);
r = norm(vect_r);

%%%%%%%%%%%%%%%%%% Attitude Kinematics Equations (Quaternions) %%%%%%%%%%%%%%%%%%
% Om = [0, -omega_Body2ECI_Body(1), -omega_Body2ECI_Body(2), -omega_Body2ECI_Body(3);
%     omega_Body2ECI_Body(1), 0, omega_Body2ECI_Body(3), -omega_Body2ECI_Body(2);
%     omega_Body2ECI_Body(2), -omega_Body2ECI_Body(3), 0, omega_Body2ECI_Body(1);
%     omega_Body2ECI_Body(3), omega_Body2ECI_Body(2), -omega_Body2ECI_Body(1), 0];
% dw(1:4,1) = 0.5*Om*q_ECI2Body;

%Only copy of the dyanmics
%dw(1:4,1) = 0.5*quatmultiply(q_ECI2Body',[0,omega_Body2ECI_Body']);
%Eq.s 48 modified....
%hat_v_m = (quat2dcm(q_ECI2Body'))*Agent(ith_satellite).magneto(:,ObserverTest.u_time_index + 1); %(-Bias_m???!!!); %estimated magnet measures (in the body frame)
%[MagTemp,GyrosTemp] = AttitudeObserver_GetMeasures_v2_1(Agent(ith_satellite).xHatUKF(1:3,ObserverTest.actual_time_index)',...
%   Agent(ith_satellite).attitude_xHatUKF(1:4,ObserverTest.u_time_index)',Agent(ith_satellite).attitude_xHatUKF(5:7,ObserverTest.u_time_index)',...
%  Agent(ith_satellite).attitude_xHatUKF(8:10,ObserverTest.u_time_index)',Agent(ith_satellite).attitude_xHatUKF(11:13,ObserverTest.u_time_index)', 1);

%[MagTemp,MagTemp2,GyrosTemp] = AttitudeObserver_GetMeasures_v2_2(Agent(ith_satellite).xHatUKF(1:3,ObserverTest.actual_time_index)',...
%w(1:4)',w(5:7)',zeros(3,1)',zeros(3,1)',ObserverTest.RPYbetweenMagSensors,1);  %chech the BIAS????!!!
alfa_m  = MagTemp;
beta_m = MagTemp2;
v_m = Agent(ith_satellite).magneto(:,ObserverTest.actual_time_index-1); %sampled
v_mbis = Agent(ith_satellite).magneto2(:,ObserverTest.actual_time_index-1); %sampled

temp = 0;
%accelerometer readings
vect_r_true =  Agent(ith_satellite).iner_ECI(1:3,ObserverTest.actual_time_index);
R_ECI2Body = quat2dcm(Agent(ith_satellite).attitude(1:4,ObserverTest.actual_time_index)');
if(ObserverTest.attitude_Ka ~= 0)
    v_a = -R_ECI2Body*(vect_r_true/norm(vect_r_true));
    R_ECI2Body = quat2dcm(q_ECI2Body');
    hat_v_a = -R_ECI2Body*(vect_r/r);
    temp = temp + 0.5*ObserverTest.attitude_Ka*(v_a*hat_v_a' - hat_v_a*v_a');
end
temp = temp +  0.5*ObserverTest.attitude_Km*(v_m*hat_v_m' - hat_v_m*v_m');
temp = temp + 0.5*ObserverTest.attitude_Kmbis*(v_mbis*hat_v_mbis' - hat_v_mbis*v_mbis');

wmes = - [-temp(2,3);temp(1,3);-temp(1,2)];
%dq  = 0.5*quatmultiply(q_ECI2Body',[0,(omega_Body2ECI_Body)']); %copy of the plant
%dq  = 0.5*quatmultiply(q_ECI2Body',[0,(omega_Body2ECI_Body + ObserverTest.attitude_Kp*wmes)']);
dq  = 0.5*quatmultiply(q_ECI2Body',[0,(GyrosTemp - w(11:13, 1) + ObserverTest.attitude_Kp*wmes)']);
d_hat_Bias_omega = - ObserverTest.attitude_Ki*wmes;

dw(1:4,1) = dq;
dw(11:13, 1) = d_hat_Bias_omega;
%%%%%%%%%%%%%%%%%%%%%%%% Attitude Dynamics Equations %%%%%%%%%%%%%%%%%%%%%%%%

R_ECI2Body = quat2dcm(q_ECI2Body');
Iom = I*omega_Body2ECI_Body;
cross_omIom = [omega_Body2ECI_Body(2)*Iom(3) - omega_Body2ECI_Body(3)*Iom(2);...
    omega_Body2ECI_Body(3)*Iom(1) - omega_Body2ECI_Body(1)*Iom(3);...
    omega_Body2ECI_Body(1)*Iom(2) - omega_Body2ECI_Body(2)*Iom(1)];

% Gravity Gradient Torque Computation
vers_o_Body = -R_ECI2Body*(vect_r/r);
Io = I*vers_o_Body;
cross_oIo = [vers_o_Body(2)*Io(3) - vers_o_Body(3)*Io(2);...
    vers_o_Body(3)*Io(1) - vers_o_Body(1)*Io(3);...
    vers_o_Body(1)*Io(2) - vers_o_Body(2)*Io(1)];
GG_torque = (3*mie/(r^3))*cross_oIo;

% Aerodynamic Drag Torque Computation
v_rel = [vect_v(1) + vect_r(2)*params.omega_e; vect_v(2) - vect_r(1)*params.omega_e; vect_v(3)];                        % satellite's relative velocity wrt Earth's rotation
v_rel_mod = norm(v_rel);                                                                                                % module of the relative velocity
rho = ExponentialAtmDensity_V1_1(norm(vect_r) - params.Re);                                                             % atmospheric density at the altitude of i-th satellite
CD = params.sat(ith_satellite).CD;                                                                                                  % extract i-th satellite CD coefficient
air_drag_torque = [0; 0; 0];                                                                                            % Initialize drag torque for i-th satellite

for j = 1:size(params.sat(ith_satellite).aero_prop, 2)
    
    % Extract i-th satellite j-th surface properties
    Area = params.sat(ith_satellite).aero_prop(j).A;
    Surf_normal = params.sat(ith_satellite).aero_prop(j).n;
    arm = params.sat(ith_satellite).aero_prop(j).arm;
   
    v_rel_body = R_ECI2Body*v_rel;                                                                                      % Compute velocity in BRF
    cross_section = max(Area*dot(v_rel_body, Surf_normal), 0);                                                          % j-th surface cross section
    F_drag = -(1/2)*rho*CD*v_rel_mod*cross_section*v_rel_body;                                                          % Drag force on j-th surface
    T_drag = cross(arm, F_drag);                                                                                        % Drag torque caused by j-th surface
    air_drag_torque = air_drag_torque + T_drag;                                                                         % Sum j-th torque to already calculated ones
end

tau = params.tau(:,ith_satellite);
dw(5:7, 1) = I\( - cross_omIom + GG_torque + air_drag_torque + tau);
%tau = reshape(ObserverTest.tau(:,ObserverTest.u_time_index),3,ObserverTest.Nagents);
%dw(5:7, 1) = I\( - cross_omIom + GG_torque + air_drag_torque + tau(:,ith_satellite));

%Omega observer dynamics: Filtering term from measure that sums up to the copy of the model
hat_Bias_Omega = w(11:13);
dw(5:7, 1) = dw(5:7, 1) + ObserverTest.attitude_Komega*( (Agent(ith_satellite).gyros(:,ObserverTest.actual_time_index)- hat_Bias_Omega) - omega_Body2ECI_Body);

dw(8:10, 1) = zeros(3,1); %constant magnetometer bias
%dw(11:13, 1) = zeros(3,1); %constant gyro bias (temperature compensated sensor)

